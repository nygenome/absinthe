#!/usr/bin/env python 

################################################################################
### COPYRIGHT ##################################################################

# Copyright (c) 2020, New York Genome Center
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     * Neither the name of the <organization> nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER>
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################# /COPYRIGHT ###
################################################################################



################################################################################
### MODULES ####################################################################

from optparse import OptionParser
from sys import stdin, stdout
import re

################################################################### /MODULES ###
################################################################################



################################################################################
### FUNCTIONS ##################################################################

def fastawrap(name, description, sequence, device, cpl=80):
	if description:
		description = ' ' + description
	device.write('>' + name + description + '\n')
	for x in range(0, len(sequence), cpl):
		device.write(sequence[x:x+cpl] + '\n')

def fastaread(filepath):
	name = None
	if filepath == 'stdin':
		fasta = stdin
	else:
		fasta = open(filepath, 'r')
	for line in fasta:
		if line[0] == '>':
			if name:
				yield(name,description,''.join(sequence))
			header = line.rstrip()[1:].split(' ')
			name = header[0]
			description = ' '.join(header[1:])
			sequence = []
		else:
			sequence.append(line.rstrip())
	if filepath != 'stdin':
		fasta.close()
	if name:
		yield(name, description, ''.join(sequence))
			
def fastacontigs(fasta):
	pattern = re.compile('[^(n)]+', re.IGNORECASE)
	for name, description, sequence in fasta:
		contigindex = 1
		for contig in pattern.finditer(sequence):
			contigcoord = contig.span()
			contigname = name + '_' + str(contigindex).zfill(5)
			contigdescription = '-'.join(str(x) for x in contigcoord)
			contigsequence = sequence[slice(*(contigcoord))]
			yield (contigname, contigdescription, contigsequence)
			contigindex += 1 

def fastasizefilter(fasta, smallest, biggest):
	for name, description, sequence in fasta:
		if len(sequence) >= smallest:
			if biggest:
				if len(sequence) <= biggest:
					yield name, description, sequence
			else:
				yield name, description, sequence
				
def fastasizesort(fasta):
	sortedrecords = sorted(((len(sequence), name, description, sequence) for name, description, sequence in fasta), reverse=True)
	for length, name, description, sequence in sortedrecords:
		yield name, description, sequence

def fastarename(fasta, prefix, pad):
	if prefix:
		prefix += '_'
	c = 0
	for name, description, sequence in fasta:
		c += 1
		yield prefix + str(c).zfill(pad), description, sequence
		
################################################################# /FUNCTIONS ###
################################################################################



################################################################################
### ARGUMENTS,OPTIONS ##########################################################

parser = OptionParser(usage="\n%prog [options]", version="%prog 0.1")

parser.add_option(
	"-i",
	metavar = "FILE",
	type = "string",
	dest = "fasta",
	default = 'stdin',
	help = "Input FASTA filename [STDIN]"
	)

parser.add_option(
	"-s",
	metavar = "INT",
	type = "int",
	dest = "s_cut",
	default = 1,
	help = "smallest contig size allowed. Default = 1"
	)

parser.add_option(
	"-b",
	metavar = "INT",
	type = "int",
	dest = "b_cut",
	default = 0,
	help = "biggest contig size allowed. Default = 0 (infinite)"
	)

parser.add_option(
	"-p",
	metavar = "STR",
	type = "string",
	dest = "prefix",
	default = '',
	help = "fasta prefix (default = None)"
	)

parser.add_option(
	"-z",
	metavar = "INT",
	type = "int",
	dest = "pad",
	default = 0,
	help = "zfill length (default = 5)"
	)

(opt, args) = parser.parse_args()
        
######################################################### /ARGUMENTS,OPTIONS ###
################################################################################



################################################################################
### CONSTANTS ##################################################################

################################################################# /CONSTANTS ###
################################################################################



################################################################################
### MAIN #######################################################################

if __name__ == "__main__":
	# read FASTA
	fasta = fastaread(opt.fasta)
	contigs = fastacontigs(fasta)
	sizefiltered = fastasizefilter(contigs, opt.s_cut, opt.b_cut)
	sizesorted  = fastasizesort(sizefiltered)
	renamed = fastarename(sizesorted, opt.prefix, opt.pad)
	
	for name, description, sequence in renamed: 
		fastawrap(name, '', sequence, stdout)
	
###################################################################### /MAIN ###
################################################################################
