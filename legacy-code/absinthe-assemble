#!/bin/bash

#########################################################################

# Copyright (c) 2020, New York Genome Center
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     * Neither the name of the <organization> nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER>
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#########################################################################


#########################################################################
(>&2 echo `date` START on ${HOSTNAME} using ${THREADS} cores) ;
#########################################################################

SAMPLE=${1} ;
CRAM=${2} ;
OUTDIR=${3} ;

REFERENCE=${4} ;
NONCHRBED=${5} ;
CHRREF=${6} ;
PHIX=${7} ;

THREADS=${8} ;
BWATHREADS=$(($THREADS*2)) ;

KMER=77 ;

### mkdirs

UUID=$(uuidgen) ;
OUTDIR=$(realpath ${OUTDIR}) ;
TEMPDIR=${OUTDIR}/tmp_${UUID} ; 
LOGDIR=${OUTDIR}/log ; 
FASTQDIR=${OUTDIR}/fastq ;
ASSEMBLYDIR=${OUTDIR}/assembly 

mkdir -p ${OUTDIR} ;
mkdir -p ${TMPDIR} ;
mkdir -p ${LOGDIR} ;
mkdir -p ${FASTQDIR} ;
mkdir -p ${ASSEMBLYDIR} ;

### processing ##########################################################
echo $(date) PROCESSING STARTED on ${HOSTNAME} >> ${LOGDIR}/${SAMPLE}.log ;

(
    samtools view ${CRAM} -T ${REFERENCE} -F 2818 -@ ${THREADS} -h 2> ${LOGDIR}/${SAMPLE}.samtools.view.0.e \
	| LC_ALL=C sort -k1,1 --parallel=${THREADS} --buffer-size 4G 2> ${LOGDIR}/${SAMPLE}.sort.0.e ;
    samtools view ${CRAM} -T ${REFERENCE} -F 2816 -f2 -L ${NONCHRBED} -@ ${THREADS} -h 2> ${LOGDIR}/${SAMPLE}.samtools.view.1.e \
	| LC_ALL=C sort -k1,1 --parallel=${THREADS} --buffer-size 4G 2> ${LOGDIR}/${SAMPLE}.sort.1.e \
	| samtools fastq - 2> ${LOGDIR}/${SAMPLE}.samtools.fastq.0.e \
	| bwa mem -t ${BWATHREADS} -p ${CHRREF} - 2> ${LOGDIR}/${SAMPLE}.bwa.mem.0.e \
	| samtools view -F 2818 -@ ${THREADS} - 2> ${LOGDIR}/${SAMPLE}.samtools.view.2.e ;
) \
    | samtools fastq - 2> ${LOGDIR}/${SAMPLE}.samtools.fastq.1.e \
    | cutadapt - -j ${THREADS} -n 3 -a AGATCGGAAGAGC -a ATCGGAAGAGCACACGT -g CGTCTTCTGCTTG -g TCGCCGTATCATT -A AGATCGGAAGAGC -A ATCGGAAGAGCACACGT -A ATCGGAAGAGCGTCGTG -G CGTCTTCTGCTTG -G TCGCCGTATCATT -q 20,20 -m 50 --interleaved  2> ${LOGDIR}/${SAMPLE}.cutadapt.0.e \
    | gem-mapper -q ignore --fast-mapping --mismatch-alphabet ACTGN -I ${PHIX} -m 0.04 -e 0.04 -T ${THREADS} 2> ${LOGDIR}/${SAMPLE}.gem.mapper.0.e \
    | filter2fq 2> ${LOGDIR}/${SAMPLE}.filter2fq.0.e \
    | split -l 4000000 --additional-suffix=.fastq -d -a 3 - ${FASTQDIR}/${SAMPLE}. ;

echo "EXTRACT/PROCESS:" "${PIPESTATUS[@]}" >> ${LOGDIR}/${SAMPLE}.log ; 

echo $(date) PROCESSING FINISHED on ${HOSTNAME} >> ${LOGDIR}/${SAMPLE}.log ;
#########################################################################


### assembly ############################################################
echo $(date) ASSEMBLY STARTED on ${HOSTNAME} >> ${LOGDIR}/${SAMPLE}.log ;

PE=$(ls ${FASTQDIR}/${SAMPLE}.*.fastq | sed ':a;N;$!ba;s/\n/ /g') ;

cd ${ASSEMBLYDIR} ;

abyss-pe contigs v=-v k=${KMER} name=${SAMPLE}.k${KMER} np=${THREADS} j=${THREADS} c=2 e=2 E=0 l=40 s=200 n=5 N=5 lib="pes" pes="${PE}" --dry-run  \
    | sed 's/mpirun/mpirun --use-hwthread-cpus --allow-run-as-root/g' > ${SAMPLE}.k${KMER}.c ;

echo "ABYSS DRY:" "${PIPESTATUS[@]}" >> ${LOGDIR}/${SAMPLE}.log ;

sh ${SAMPLE}.k${KMER}.c 2> ${LOGDIR}/${SAMPLE}.abyss.0.e > ${LOGDIR}/${SAMPLE}.abyss.0.o ;

echo "ABYSS RUN:" "${PIPESTATUS[@]}" >> ${LOGDIR}/${SAMPLE}.log ;

cat ${SAMPLE}.k${KMER}-contigs.fa \
	| fasta_process -s 200 -p ${SAMPLE}.k${KMER} -z 6 > ${OUTDIR}/${SAMPLE}.fa 2> ${LOGDIR}/${SAMPLE}.fasta_process.0.e;	
echo "PROCESS FASTA:" "${PIPESTATUS[@]}" >> ${LOGDIR}/${SAMPLE}.log ;

cd .. ;

echo $(date) ASSEMBLY FINISHED on ${HOSTNAME} >> ${LOGDIR}/${SAMPLE}.log ;
#########################################################################
(>&2 echo) ;
(>&2 echo `date` FINISH on ${HOSTNAME} using ${THREADS} cores) ;
#########################################################################
